lr[2]
lr[1,1]
for i in length(lr)){
if(lr[i]> 2.5) lr[i]<-3 else lr[i] <-2
}
for i in length(lr){
if(lr[i]> 2.5) lr[i]<-3 else lr[i] <-2
}
for (i in length(lr)){
if(lr[i]> 2.5) lr[i]<-3 else lr[i] <-2
}
lr
for (i in 1:364){
if(lr[i]> 2.5) lr[i]=3 else lr[i] =2
}
lr
error.rate.lr <- sum(zipTest$V1 != lr)/nrow(zipTest)
error.rate.lr
1-error.rate.lr
1-(error.rate.knn)
plot(lr, zipTest$V1)
table(`Actual Class` = zipTest$V1, `Predicted Class` =lr)
error.rate.knn
error.vector.knn<- zipTest$V1-knn/nrow(zipTest)
error.vector.knn<- (zipTest$V1-knn)/nrow(zipTest)
error.vector.knn
error.vector.knn<- (zipTest$V1-knn)
error.vector.knn
knn()
knn
knn -1
knnN <- as.numeric(knn())
knnN <- as.numeric(knn
)
knnN
zn<- as.numeric(zipTest$V1)
zn
zn-knnN
system.time(
lr.model <- lm(zipTr$V1 ~ ., data= zipTr)
summary(lr.model)##>>>>>>>>>>>>>>>>>>>>> We get RSE here
prediction.lr <- predict(lr.model, zipTest, se.fit = TRUE))
system.time(lr.model <- lm(zipTr$V1 ~ ., data= zipTr))
system.time(prediction.lr <- predict(lr.model, zipTest, se.fit = TRUE))
system.time(model.knn <- knn(zipTr, zipTest, zipTr$V1, k = 2))
system.time(model.knn <- knn(zipTr, zipTest, zipTr$V1, k = 2))
system.time(lr.model <- lm(zipTr$V1 ~ ., data= zipTr))
summary(lr.model)##>>>>>>>>>>>>>>>>>>>>> We get RSE here
system.time(prediction.lr <- predict(lr.model, zipTest, se.fit = TRUE))
lr<- as.data.frame(prediction.lr$fit)
lr<- lr$`prediction.lr$fit
for (i in 1:364){
if(lr[i]> 2.5) lr[i]=3 else lr[i] =2
}
error.rate.lr <- sum(zipTest$V1 != lr)/nrow(zipTest) #### >>>> 0.04120879
print(paste0("Accuary (Precision): ", 1 - error.rate.lr)) ## >>>>>>>>  0.9587912
table(`Actual Class` = zipTest$V1, `Predicted Class` =lr)
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i)
knnCompute<- function(train, test, cl, k){
system.time(model.knn <- knn(train, test, cl, k))
return(model.knn)
}
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i)
model.knn <-as.data.frame(model.knn)
i
knn<-model.knn$model.knn[1:364]
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest)
print(paste0("Accuary (Precision): ", 1 - error.rate.knn))
K=k+1;
i=i+2
for (i in 1:15){
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i)
model.knn <-as.data.frame(model.knn)
knn<-model.knn$model.knn[1:364]
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest)
print(paste0("Accuary (Precision): ", 1 - error.rate.knn))
K=k+1;
i=i+2
}
i
model.knn$model.knn
x<- model.knn$model.knn
x
x[1]
y<- model.knn$model.knn[1:364]
y
rm(list = ls())
library("ElemStatLearn")
library("RWeka")
library("FNN")
zipTr <- as.data.frame(zip.train)
zipTr <- zipTr[zipTr$V1 ==2 | zipTr$V1 == 3,]
dim(zipTr)
zipTest <- as.data.frame(zip.test)
zipTest <- zipTest[zipTest$V1 ==2 | zipTest$V1 == 3,]
dim(zipTest)system.time(
knnCompute<- function(train, test, cl, k){
system.time(model.knn <- knn(train, test, cl, k))
return(model.knn)
}
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i)
for (i in 1:15){
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i)
model.knn <-as.data.frame(model.knn)
knn<-model.knn$model.knn[1:364]
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest)
print(paste0("Accuary (Precision): ", 1 - error.rate.knn))
k=k+1;
i=i+2
}
rm(list = ls())
a
a;
a=0
a[1]=5
a[2]=6
a
rm(list = ls())
library("ElemStatLearn")
library("RWeka")
library("FNN")
zipTr <- as.data.frame(zip.train)
zipTr <- zipTr[zipTr$V1 ==2 | zipTr$V1 == 3,]
dim(zipTr)
zipTest <- as.data.frame(zip.test)
zipTest <- zipTest[zipTest$V1 ==2 | zipTest$V1 == 3,]
dim(zipTest)system.time(
knnCompute<- function(train, test, cl, k){
system.time(model.knn <- knn(train, test, cl, k))
return(model.knn)
}
k=1
i=1
error.rate.knn=0
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i)
mpdel.knn
model.knn
model.knn <-as.data.frame(model.knn)
knn<-model.knn$model.knn[1:364]
knn
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest);
print(paste0("Accuary (Precision): ", 1 - error.rate.knn[k]));
error.rate.knn
k=k+1;
i=i+2;
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i);
model.knn
model.knn <-as.data.frame(model.knn);
knn<-model.knn$model.knn[1:364];
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest);
print(paste0("Accuary (Precision): ", 1 - error.rate.knn[k]));
print(paste0("Accuary (Precision): ", 1 - error.rate.knn));
k=k+1;
i=i+2;
error.rate.knn
rm(list = ls())
library("ElemStatLearn")
library("RWeka")
library("FNN")
zipTr <- as.data.frame(zip.train)
zipTr <- zipTr[zipTr$V1 ==2 | zipTr$V1 == 3,]
dim(zipTr)
zipTest <- as.data.frame(zip.test)
zipTest <- zipTest[zipTest$V1 ==2 | zipTest$V1 == 3,]
dim(zipTest)
knnCompute<- function(train, test, cl, k){
system.time(model.knn <- knn(train, test, cl, k))
return(model.knn)
}
k=1
i=1
error.rate.knn=0
for (i in 1:15){
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i);
model.knn <-as.data.frame(model.knn);
knn<-model.knn$model.knn[1:364];
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest);
print(paste0("Accuary (Precision): ", 1 - error.rate.knn));
k=k+1;
i=i+2;
}
error.rate.knn
for (i in seq(1,14,2)){ preint(i)}
for (i in seq(1,14,2)){ print(i)}
rm(list = ls())
library("ElemStatLearn")
library("RWeka")
library("FNN")
zipTr <- as.data.frame(zip.train)
zipTr <- zipTr[zipTr$V1 ==2 | zipTr$V1 == 3,]
dim(zipTr)
zipTest <- as.data.frame(zip.test)
zipTest <- zipTest[zipTest$V1 ==2 | zipTest$V1 == 3,]
dim(zipTest)
knnCompute<- function(train, test, cl, k){
system.time(model.knn <- knn(train, test, cl, k))
return(model.knn)
}
k=1
error.rate.knn=0
for (i in seq(1,15,2)){
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i);
model.knn <-as.data.frame(model.knn);
knn<-model.knn$model.knn[1:364];
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest);
print(paste0("Accuary (Precision): ", 1 - error.rate.knn));
k=k+1;
}
error.rate.knn
model.knn
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i);
model.knn
str(model.knn)
summary(model.knn)
prediction.knn2 <- predict(model.knn ,  zipTest, type = "class")
?IBk
i=3
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i);
model.knn <-as.data.frame(model.knn);
k=1
knn<-model.knn$model.knn[1:364];
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest);
print(paste0("Accuary (Precision): ", 1 - error.rate.knn));
error.rate.knn
error.rate.knn<- 0
error.rate.knn
i
i=3
k=1
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i);
model.knn <-as.data.frame(model.knn);
knn<-model.knn$model.knn[1:364];
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest);
print(paste0("Accuary (Precision): ", 1 - error.rate.knn));
error.rate.knn
k=k+1;
k
i
i
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i);
model.knn <-as.data.frame(model.knn);
knn<-model.knn$model.knn[1:364];
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest);
print(paste0("Accuary (Precision): ", 1 - error.rate.knn));
error.rate.knn
k=k+1;
k
i
i=i+2
i
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i);
model.knn <-as.data.frame(model.knn);
knn<-model.knn$model.knn[1:364];
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest);
print(paste0("Accuary (Precision): ", 1 - error.rate.knn));
k=k+1;
error.rate.knn
k
i
i=11
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i);
model.knn <-as.data.frame(model.knn);
knn<-model.knn$model.knn[1:364];
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest);
print(error.rate.knn)
.Primitive("list")
rm(list = ls())
library("ElemStatLearn")
library("RWeka")
library("FNN")
zipTr <- as.data.frame(zip.train)
zipTr <- zipTr[zipTr$V1 ==2 | zipTr$V1 == 3,]
dim(zipTr)
zipTest <- as.data.frame(zip.test)
zipTest <- zipTest[zipTest$V1 ==2 | zipTest$V1 == 3,]
dim(zipTest)
knnCompute<- function(train, test, cl, k){
system.time(model.knn <- knn(train, test, cl, k))
return(model.knn)
}
k=1
error.rate.knn=0
for (i in seq(1,15,2)){
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i);
model.knn <-as.data.frame(model.knn);
knn<-model.knn$model.knn[1:364];
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest);
print(error.rate.knn)
print(paste0("Accuary (Precision): ", 1 - error.rate.knn));
k=k+1;
}
k
m=[1:9]
m[1:9]=[1,2,3,4,5,6,7,8,9]
m=[1,2,3,4,5,6,7,8,9]
m
as.data.frame(m) =[1,2,3,4,5,6,7,8,9]
m=(1,2,3,4,5,6,7,8,9)
m=c(1,2,3,4,5,6,7,8,9)
plot(m, error.rate.knn)
m
error.rate.knn
m=c(1,2,3,4,5,6,7,8)
plot(m, error.rate.knn)
.Primitive("list")
rm(list = ls())
library("ElemStatLearn")
library("RWeka")
library("FNN")
zipTr <- as.data.frame(zip.train)
zipTr <- zipTr[zipTr$V1 ==2 | zipTr$V1 == 3,]
dim(zipTr)
zipTest <- as.data.frame(zip.test)
zipTest <- zipTest[zipTest$V1 ==2 | zipTest$V1 == 3,]
dim(zipTest)
knnCompute<- function(train, test, cl, k){
system.time(model.knn <- knn(train, test, cl, k))
return(model.knn)
}
k=1
error.rate.knn=0
for (i in seq(1,15,2)){
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i);
model.knn <-as.data.frame(model.knn);
knn<-model.knn$model.knn[1:364];
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest);
print(paste0("Accuary (Precision): ", 1 - error.rate.knn));
k=k+1;
}
error.rate.knn
print(error.rate.knn)
m=c(1:8)
plot(m, error.rate.knn)
?plot
plot(m, error.rate.knn, l, xlab = "K", ylab = "Error Rate")
plot(m, error.rate.knn,type = l , xlab = "K", ylab = "Error Rate")
plot(m, error.rate.knn,type = "l" , xlab = "K", ylab = "Error Rate")
plot(m, error.rate.knn,type = "l" , main="Error rate Vs K",xlab = "K", ylab = "Error Rate")
mean.error.knn <-mean(error.rate.knn)## >>>>>>>>>>>> 0.02197802
mean.error.knn
error.rate.knn
min.error.rate.knn <- min(error.rate.knn)## >>>>>>>>>>>> 0.02197802
min.error.rate.knn
system.time(lr.model <- lm(zipTr$V1 ~ ., data= zipTr))
summary(lr.model)##>>>>>>>>>>>>>>>>>>>>> We get RSE here
system.time(prediction.lr <- predict(lr.model, zipTest, se.fit = TRUE))
lr<- as.data.frame(prediction.lr$fit)
lr<- lr$`prediction.lr$fit
for (i in 1:364){
if(lr[i]> 2.5) lr[i]=3 else lr[i] =2
}
lr
for (i in 1:364){
if(lr[i]> 2.5) lr[i]=3 else lr[i] =2
}
system.time(lr.model <- lm(zipTr$V1 ~ ., data= zipTr))
summary(lr.model)##>>>>>>>>>>>>>>>>>>>>> We get RSE here
system.time(prediction.lr <- predict(lr.model, zipTest, se.fit = TRUE))
lr<- as.data.frame(prediction.lr$fit)
lr
lr<- lr$`prediction.lr$fit
''
'
lr<- lr$`prediction.lr$fit`
lr
for (i in 1:364){
if(lr[i]> 2.5) lr[i]=3 else lr[i] =2
}
lr
error.rate.lr <- sum(zipTest$V1 != lr)/nrow(zipTest) #### >>>> 0.04120879
error.rate.lr
print(paste0("Accuary (Precision): ", 1 - error.rate.lr)) ## >>>>>>>>  0.9587912
table(`Actual Class` = zipTest$V1, `Predicted Class` =lr)
rm(list=ls())
library("MASS")
library("ggplot2")
setwd("/media/parik/New Volume/SDM/R Lab/HomeWork01")
setwd("/media/parik/New Volume/SDM/R Lab/HomeWork01")
png("ErroRate_vs_Knn.png")
plot(m, error.rate.knn,type = "l" , main="Error rate Vs K",xlab = "K", ylab = "Error Rate")
png("ErroRate_vs_Knn.png")
plot(m=c(1:8), error.rate.knn,type = "l" , main="Error rate Vs K",xlab = "K", ylab = "Error Rate")
png("ErroRate_vs_Knn.png")
m=c(1:8)
plot(m, error.rate.knn,type = "l" , main="Error rate Vs K",xlab = "K", ylab = "Error Rate")
rm(list = ls())
library("ElemStatLearn")
library("RWeka")
library("FNN")
setwd("/media/parik/New Volume/SDM/R Lab/HomeWork01")
zipTr <- as.data.frame(zip.train)
zipTr <- zipTr[zipTr$V1 ==2 | zipTr$V1 == 3,]
dim(zipTr)
zipTest <- as.data.frame(zip.test)
zipTest <- zipTest[zipTest$V1 ==2 | zipTest$V1 == 3,]
dim(zipTest)
knnCompute<- function(train, test, cl, k){
system.time(model.knn <- knn(train, test, cl, k))
return(model.knn)
}
k=1
error.rate.knn=0
for (i in seq(1,15,2)){
model.knn=knnCompute(zipTr, zipTest, zipTr$V1, i);
model.knn <-as.data.frame(model.knn);
knn<-model.knn$model.knn[1:364];
error.rate.knn[k] <- sum(zipTest$V1!= knn)/nrow(zipTest);
print(paste0("Accuary (Precision): ", 1 - error.rate.knn));
k=k+1;
}
print(error.rate.knn)
png("ErroRate_vs_Knn.png")
m=c(1:8)
plot(m, error.rate.knn,type = "l" , main="Error rate Vs K",xlab = "K", ylab = "Error Rate")
dev.off()
png("ErroRate_vs_Knn.png")
m=c(1,3,5,7,9,11,13,15)
plot(m, error.rate.knn,type = "l" , main="Error rate Vs K",xlab = "K", ylab = "Error Rate")
dev.off()
png("ErroRate_vs_Knn.png")
m=c(1:15)
plot(m, error.rate.knn,type = "l" , main="Error rate Vs K",xlab = "K", ylab = "Error Rate")
rm(list=ls())
library("MASS")
library("ggplot2")
setwd("/media/parik/New Volume/SDM/R Lab/HomeWork01")
data <- as.data.frame(Boston)
str(data)
pairs(data)
fix(data)
Boston
Boston.filtered
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, font, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt)
}
pairs.default(data, lower.panel = panel.smooth, upper.panel = panel.cor, bg = c("red", "green3", "blue", "yellow"), cex =1, pch = 21,cex.labels = 2, font.labels = 2)
png("PairWise ScatterPlot with Correlations.png")
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, font, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt)
}
pairs.default(data, lower.panel = panel.smooth, upper.panel = panel.cor, bg = c("red", "green3", "blue", "yellow"), cex =1, pch = 21,cex.labels = 2, font.labels = 2)
dev.off()
jpeg("PairWise ScatterPlot with Correlations.jpeg")
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, font, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt)
}
pairs.default(data, lower.panel = panel.smooth, upper.panel = panel.cor, bg = c("red", "green3", "blue", "yellow"), cex =1, pch = 21,cex.labels = 2, font.labels = 2)
dev.off()
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, font, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt)
}
c<-pairs.default(data, lower.panel = panel.smooth, upper.panel = panel.cor, bg = c("red", "green3", "blue", "yellow"), cex =1, pch = 21,cex.labels = 2, font.labels = 2)
c
pairs.default(data, lower.panel = panel.smooth, upper.panel = panel.cor, bg = c("red", "green3", "blue", "yellow"), cex =1, pch = 21,cex.labels = 2, font.labels = 2)
pairs.default(data, lower.panel = panel.smooth, upper.panel = panel.cor, bg = c("red", "green3", "blue", "yellow"), cex =1, pch = 21,cex.labels = 2, font.labels = 2)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv)
pairs.default(data, lower.panel = panel.smooth, upper.panel = panel.cor, bg = c("red", "green3", "blue", "yellow"), cex =1, pch = 21,cex.labels = 2, font.labels = 2)
pairs(data, lower.panel = panel.smooth, upper.panel = panel.cor, bg = c("red", "green3", "blue", "yellow"), cex =1, pch = 21,cex.labels = 2, font.labels = 2)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, font, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt)
}
pairs(data, lower.panel = panel.smooth, upper.panel = panel.cor, bg = c("red", "green3", "blue", "yellow"), cex =1, pch = 21,cex.labels = 2, font.labels = 2)
d1 <- pairs(~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + lstat + medv, data = data)
d1
pairs(~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + lstat + medv, data = data)
rm(list=ls())
library("MASS")
library("ggplot2")
setwd("/media/parik/New Volume/SDM/R Lab/HomeWork01")
data <- as.data.frame(Boston)
str(data)
pairs(data)
pairs(data)
dev.off
dev.off()
pairs(data)
